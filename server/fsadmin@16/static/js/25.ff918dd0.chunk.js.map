{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/utils/createImgSrcStringFromBinary.js","apiCalls/paintings.js","components/paintings/FullResolutionImage.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","module","exports","contentType","data","Buffer","from","toString","getPainting","slug","a","axios","get","process","getPaintingWithFullImage","getPaintingThumbnail","id","addPainting","painting","authToken","post","headers","_boundary","editPainting","put","removePainting","delete","uploadPaintingCSVFormData","csvFormData","handleProgressEvent","onUploadProgress","progressEvent","uploadMultiplePaintingImages","formData","FullResolutionImage","match","useState","imgUrl","setImgUrl","error","setError","useEffect","params","paintingSlug","image","createImgSrcStringFromBinary","console","log","JSON","stringify","asyncFunc","Fragment","style","display","src","alt"],"mappings":"yKAIe,SAASA,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAEThB,GAAKM,EAAKW,SAAWjB,GAH8CO,GAAK,IAK9E,MAAOW,GACPV,GAAK,EACLC,EAAKS,EACL,QACA,IACOX,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAmB,EAAA,GAA2BpB,EAAKC,IGLjF,WACb,MAAM,IAAIoB,UAAU,6IHIgF,K,qBILtGC,cAAOC,QAAU,SAAsCC,EAAaC,GAClE,MAAM,QAAN,OAAeD,EAAf,mBAAqCE,EAAOC,KAAKF,GAAMG,SAAS,c,yXCCrDC,EAAW,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sEAAsBC,IAAMC,IAAN,UAAaC,4BAAb,sBAAoDJ,IAA1E,mFAAH,sDAEXK,EAAwB,uCAAG,WAAOL,GAAP,SAAAC,EAAA,sEAAsBC,IAAMC,IAAN,UAAaC,4BAAb,sCAAoEJ,IAA1F,mFAAH,sDAExBM,EAAoB,uCAAG,WAAOC,GAAP,SAAAN,EAAA,sEAAoBC,IAAMC,IAAN,UAAaC,4BAAb,gCAA8DG,IAAlF,mFAAH,sDAEpBC,EAAW,uCAAG,WAAOC,EAAUC,GAAjB,SAAAT,EAAA,sEAAqCC,IAAMS,KAAN,UAC3DP,4BAD2D,cAE9DK,EACA,CACEG,QAAS,CACPF,YACA,eAAe,iCAAf,OAAiDD,EAASI,cANrC,mFAAH,wDAUXC,EAAY,uCAAG,WAAOL,EAAUC,GAAjB,SAAAT,EAAA,sEAAqCC,IAAMa,IAAN,UAC5DX,4BAD4D,cAE/DK,EACA,CACEG,QAAS,CACPF,YACA,eAAe,iCAAf,OAAiDD,EAASI,cANpC,mFAAH,wDAWZG,EAAc,uCAAG,WAAOT,EAAIG,GAAX,SAAAT,EAAA,sEACtBC,IAAMe,OAAN,UAAgBb,4BAAhB,cAAuD,CAC3DQ,QAAS,CACPF,aAEFf,KAAM,CACJY,QANwB,mFAAH,wDAUdW,EAAyB,uCAAG,WACvCC,EACAT,EACAU,GAHuC,SAAAnB,EAAA,sEAKjCC,IAAMS,KAAN,UACDP,4BADC,yBAEJe,EACA,CACEP,QAAS,CACPF,YACA,eAAe,iCAAf,OAAiDS,EAAYN,YAE/DQ,iBAAkB,SAACC,GACjBF,EAAoBE,MAda,mFAAH,0DAmBzBC,EAA4B,uCAAG,WAC1CC,EACAd,EACAU,GAH0C,SAAAnB,EAAA,sEAKpCC,IAAMS,KAAN,UACDP,4BADC,8CAEJoB,EACA,CACEZ,QAAS,CACPF,YACA,eAAe,iCAAf,OAAiDc,EAASX,YAE5DQ,iBAAkB,SAACC,GACjBF,EAAoBE,MAdgB,mFAAH,2D,yHCzB1BG,UA7Ba,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EACbC,mBAAS,IADI,mBAClCC,EADkC,KAC1BC,EAD0B,OAEfF,mBAAS,IAFM,mBAElCG,EAFkC,KAE3BC,EAF2B,KAiBzC,OAbAC,qBAAU,YACO,uCAAG,4BAAA/B,EAAA,+EAESI,YAAyBqB,EAAMO,OAAOC,cAF/C,QAERzB,EAFQ,QAGDd,KAAKwC,OAAON,EAAUO,IAA6B3B,EAASd,KAAKwC,MAAMzC,YAAae,EAASd,KAAKwC,MAAMxC,OAHvG,gDAKd0C,QAAQC,IAAR,MACAP,EAASQ,KAAKC,UAAL,OANK,yDAAH,qDASfC,KACC,CAACf,EAAMO,OAAOC,eAGf,kBAAC,IAAMQ,SAAP,KACGZ,GAASA,EACTF,GAAU,yBACTe,MAAO,CAAEC,QAAS,SAClBC,IAAKjB,EACLkB,IAAKpB,EAAMO,OAAOC","file":"static/js/25.ff918dd0.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","module.exports = function createImgSrcStringFromBinary(contentType, data) {\r\n  return `data:${contentType};base64,${Buffer.from(data).toString('base64')}`\r\n}","import axios from \"axios\";\r\n\r\nexport const getPainting = async (slug) => await axios.get(`${process.env.REACT_APP_API}/paintings/${slug}`);\r\n\r\nexport const getPaintingWithFullImage = async (slug) => await axios.get(`${process.env.REACT_APP_API}/paintings/with-full-image/${slug}`);\r\n\r\nexport const getPaintingThumbnail = async (id) => await axios.get(`${process.env.REACT_APP_API}/paintings/thumbnail/${id}`);\r\n\r\nexport const addPainting = async (painting, authToken) => await axios.post(\r\n  `${process.env.REACT_APP_API}/paintings`,\r\n  painting,\r\n  {\r\n    headers: {\r\n      authToken,\r\n      \"Content-Type\": `multipart/form-data; boundary=${painting._boundary}`,\r\n    },\r\n  });\r\n\r\nexport const editPainting = async (painting, authToken) => await axios.put(\r\n  `${process.env.REACT_APP_API}/paintings`,\r\n  painting,\r\n  {\r\n    headers: {\r\n      authToken,\r\n      \"Content-Type\": `multipart/form-data; boundary=${painting._boundary}`,\r\n    },\r\n  });\r\n\r\n\r\nexport const removePainting = async (id, authToken) =>\r\n  await axios.delete(`${process.env.REACT_APP_API}/paintings`, {\r\n    headers: {\r\n      authToken,\r\n    },\r\n    data: {\r\n      id,\r\n    },\r\n  });\r\n\r\nexport const uploadPaintingCSVFormData = async (\r\n  csvFormData,\r\n  authToken,\r\n  handleProgressEvent\r\n) =>\r\n  await axios.post(\r\n    `${process.env.REACT_APP_API}/paintings/upload-csv`,\r\n    csvFormData,\r\n    {\r\n      headers: {\r\n        authToken,\r\n        \"Content-Type\": `multipart/form-data; boundary=${csvFormData._boundary}`,\r\n      },\r\n      onUploadProgress: (progressEvent) => {\r\n        handleProgressEvent(progressEvent);\r\n      },\r\n    }\r\n  );\r\n\r\nexport const uploadMultiplePaintingImages = async (\r\n  formData,\r\n  authToken,\r\n  handleProgressEvent\r\n) =>\r\n  await axios.post(\r\n    `${process.env.REACT_APP_API}/paintings/upload-multiple-painting-images`,\r\n    formData,\r\n    {\r\n      headers: {\r\n        authToken,\r\n        \"Content-Type\": `multipart/form-data; boundary=${formData._boundary}`,\r\n      },\r\n      onUploadProgress: (progressEvent) => {\r\n        handleProgressEvent(progressEvent);\r\n      },\r\n    }\r\n  );\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { getPaintingWithFullImage } from '../../apiCalls/paintings'\r\nimport createImgSrcStringFromBinary from \"../utils/createImgSrcStringFromBinary\";\r\n\r\nconst FullResolutionImage = ({ match }) => {\r\n  const [imgUrl, setImgUrl] = useState(\"\")\r\n  const [error, setError] = useState(\"\")\r\n\r\n  useEffect(() => {\r\n    const asyncFunc = async () => {\r\n      try {\r\n        const painting = await getPaintingWithFullImage(match.params.paintingSlug)\r\n        if (painting.data.image) setImgUrl(createImgSrcStringFromBinary(painting.data.image.contentType, painting.data.image.data))\r\n      } catch (error) {\r\n        console.log(error)\r\n        setError(JSON.stringify(error))\r\n      }\r\n    }\r\n    asyncFunc()\r\n  }, [match.params.paintingSlug])\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {error && error}\r\n      {imgUrl && <img\r\n        style={{ display: \"block\" }}\r\n        src={imgUrl}\r\n        alt={match.params.paintingSlug}\r\n      />}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default FullResolutionImage;\r\n"],"sourceRoot":""}