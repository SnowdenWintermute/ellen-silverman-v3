{"version":3,"sources":["apiCalls/user.js","store/actions/cart-actions.js","components/common/paper/BasicPaper.js","apiCalls/stripe.js","components/user/shopFlow/StripeWidget.js","components/user/shopFlow/Payment.js"],"names":["saveCart","cartItemIdsAndQuantities","authToken","a","axios","post","process","headers","getCart","get","clearCart","delete","lookupNewAddress","address","getUserAddresses","confirmNewAddress","addressId","put","selectShippingAddress","removeAddress","addressIdToRemove","createOrder","stripeResponse","getOwnOrdersByStatus","status","getOwnOrderById","orderId","submitReturnRequest","selectedPaintings","returnNotes","cancelOrder","updateCartItems","newCartItems","type","payload","setSelectedShippingAddress","useStyles","makeStyles","theme","paper","marginLeft","marginRight","padding","breakpoints","down","overflow","BasicPaper","children","classes","className","createPaymentIntent","StripeWidget","dispatch","useDispatch","user","useSelector","state","useState","succeeded","setSucceeded","error","setError","processing","setProcessing","disabled","setDisabled","clientSecret","setClientSecret","stripe","useStripe","elements","useElements","useEffect","token","response","data","console","log","asyncFunc","handleSuccess","localStorage","removeItem","toast","success","JSON","stringify","handleSubmit","e","preventDefault","confirmCardPayment","payment_method","card","getElement","CardElement","billing_details","name","target","value","message","handleChange","empty","to","id","onSubmit","options","style","base","color","fontFamily","fontSmoothing","fontSize","backgroundColor","invalid","iconColor","height","onChange","Button","variant","marginTop","width","promise","loadStripe","Payment","history","cart","setCart","cartFromDatabase","userCart","push","Typography","marginBottom","cartTotal"],"mappings":"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","file":"static/js/26.1c71cdba.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const saveCart = async (cartItemIdsAndQuantities, authToken) =>\r\n  await axios.post(\r\n    `${process.env.REACT_APP_API}/user/cart`,\r\n    { cartItemIdsAndQuantities },\r\n    {\r\n      headers: {\r\n        authToken,\r\n      },\r\n    }\r\n  );\r\n\r\nexport const getCart = async (authToken) =>\r\n  await axios.get(`${process.env.REACT_APP_API}/user/cart`, {\r\n    headers: {\r\n      authToken,\r\n    },\r\n  });\r\n\r\nexport const clearCart = async (authToken) =>\r\n  await axios.delete(`${process.env.REACT_APP_API}/user/cart`, {\r\n    headers: {\r\n      authToken,\r\n    },\r\n  });\r\n\r\nexport const lookupNewAddress = async (address, authToken) => await axios.post(`${process.env.REACT_APP_API}/user/address`, { address }, {\r\n  headers: {\r\n    authToken,\r\n  },\r\n})\r\n\r\nexport const getUserAddresses = async (authToken) => await axios.get(`${process.env.REACT_APP_API}/user/address`, {\r\n  headers: {\r\n    authToken,\r\n  },\r\n})\r\n\r\nexport const confirmNewAddress = async (addressId, authToken) => await axios.put(`${process.env.REACT_APP_API}/user/address`, { addressId }, {\r\n  headers: {\r\n    authToken,\r\n  },\r\n})\r\n\r\nexport const selectShippingAddress = async (addressId, authToken) => await axios.put(`${process.env.REACT_APP_API}/user/address/select`, { addressId }, {\r\n  headers: {\r\n    authToken,\r\n  },\r\n})\r\n\r\nexport const removeAddress = async (addressIdToRemove, authToken) => await axios.put(`${process.env.REACT_APP_API}/user/address/remove`, { addressIdToRemove }, {\r\n  headers: {\r\n    authToken,\r\n  },\r\n})\r\n\r\nexport const createOrder = async (stripeResponse, authToken) => await axios.post(`${process.env.REACT_APP_API}/user/order`, { stripeResponse }, {\r\n  headers: {\r\n    authToken,\r\n  },\r\n})\r\n\r\nexport const getOwnOrdersByStatus = async (status, authToken) => await axios.get(`${process.env.REACT_APP_API}/user/order/${status}`, {\r\n  headers: {\r\n    authToken,\r\n  },\r\n})\r\n\r\nexport const getOwnOrderById = async (orderId, authToken) => await axios.get(`${process.env.REACT_APP_API}/user/order/id/${orderId}`, {\r\n  headers: {\r\n    authToken,\r\n  },\r\n})\r\n\r\nexport const submitReturnRequest = async (orderId, selectedPaintings, returnNotes, authToken) => await axios.put(`${process.env.REACT_APP_API}/user/order/return`,\r\n  { orderId, selectedPaintings, returnNotes },\r\n  {\r\n    headers: {\r\n      authToken,\r\n    },\r\n  })\r\n\r\nexport const cancelOrder = async (orderId, authToken) => await axios.put(`${process.env.REACT_APP_API}/user/order/cancel`,\r\n  { orderId },\r\n  {\r\n    headers: {\r\n      authToken,\r\n    },\r\n  })","export const UPDATE_CART = \"UPDATE_CART\";\r\nexport const SET_SELECTED_SHIPPING_ADDRESS = \"SET_SELECTED_SHIPPING_ADDRESS\";\r\n\r\nexport const updateCartItems = (newCartItems) => {\r\n  return {\r\n    type: UPDATE_CART,\r\n    payload: newCartItems,\r\n  };\r\n};\r\n\r\nexport const setSelectedShippingAddress = (addressId) => {\r\n  return {\r\n    type: SET_SELECTED_SHIPPING_ADDRESS,\r\n    payload: addressId,\r\n  };\r\n};","import { Paper } from '@material-ui/core'\r\nimport React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  paper: {\r\n    marginLeft: 10,\r\n    marginRight: 10,\r\n    padding: 15,\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      overflow: \"scroll\"\r\n    }\r\n  },\r\n}))\r\n\r\nconst BasicPaper = ({ children }) => {\r\n  const classes = useStyles()\r\n  return (\r\n    <Paper className={classes.paper}>\r\n      {children}\r\n    </Paper>\r\n  )\r\n}\r\nexport default BasicPaper","import axios from 'axios'\r\n\r\nexport const createPaymentIntent = async (authToken) => await axios.post(`${process.env.REACT_APP_API}/stripe/create-payment-intent`,\r\n  {},\r\n  {\r\n    headers: {\r\n      authToken\r\n    }\r\n  })","import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js'\r\nimport { createPaymentIntent } from '../../../apiCalls/stripe'\r\nimport { createOrder, clearCart } from '../../../apiCalls/user'\r\nimport { Button } from '@material-ui/core'\r\nimport { updateCartItems } from \"../../../store/actions/cart-actions\"\r\nimport { toast } from 'react-toastify'\r\n\r\nexport const StripeWidget = () => {\r\n  const dispatch = useDispatch()\r\n  const user = useSelector(state => state.user)\r\n  const [succeeded, setSucceeded] = useState(false)\r\n  const [error, setError] = useState(null)\r\n  const [processing, setProcessing] = useState(\"\")\r\n  const [disabled, setDisabled] = useState(true)\r\n  const [clientSecret, setClientSecret] = useState(\"\")\r\n\r\n  const stripe = useStripe()\r\n  const elements = useElements()\r\n\r\n  useEffect(() => {\r\n    const asyncFunc = async () => {\r\n      try {\r\n        const response = await createPaymentIntent(user.token)\r\n        setClientSecret(response.data.clientSecret)\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    }\r\n    asyncFunc()\r\n  }, [user])\r\n\r\n  const handleSuccess = async (payload) => {\r\n    setError(null)\r\n    setProcessing(false)\r\n    setSucceeded(true)\r\n    try {\r\n      await createOrder(payload, user.token)\r\n      await clearCart(user.token);\r\n      localStorage.removeItem('cart')\r\n      dispatch(updateCartItems([]))\r\n      toast.success(\"Order paid and saved\")\r\n    } catch (error) {\r\n      toast.error(JSON.stringify(error))\r\n    }\r\n  }\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault()\r\n    setProcessing(true)\r\n    try {\r\n      const payload = await stripe.confirmCardPayment(clientSecret, {\r\n        payment_method: {\r\n          card: elements.getElement(CardElement),\r\n          billing_details: {\r\n            name: e.target.name.value\r\n          }\r\n        }\r\n      })\r\n      if (payload.error) {\r\n        setError(`Payment failed: ${payload.error.message}`)\r\n      } else {\r\n        handleSuccess(payload)\r\n      }\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n    setProcessing(false)\r\n  };\r\n\r\n  const handleChange = async (e) => {\r\n    setDisabled(e.empty)\r\n    setError(e.error ? e.error.message : \"\")\r\n  };\r\n\r\n  const cardStyle = {\r\n    style: {\r\n      base: {\r\n        color: \"#32325d\",\r\n        fontFamily: \"Roboto, sans-serif\",\r\n        fontSmoothing: \"antialiased\",\r\n        fontSize: \"16px\",\r\n        backgroundColor: \"white\",\r\n        \"::placeholder\": {\r\n          color: \"#32325d\",\r\n        },\r\n      },\r\n      invalid: {\r\n        color: \"#fa755a\",\r\n        iconColor: \"#fa755a\",\r\n        height: 70,\r\n        backgroundColor: \"white\"\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {succeeded && <p className={\"result-message\"}>\r\n        Payment successful.{\" \"}\r\n        <Link className=\"standard-link underlined\" to=\"user/history\">\r\n          See it in your purchase history\r\n           </Link>\r\n      </p>}\r\n      {!succeeded && <form id=\"payment-form\" onSubmit={handleSubmit}>\r\n        {error && error}\r\n        <CardElement\r\n          id=\"card-element\"\r\n          options={cardStyle}\r\n          onChange={handleChange}\r\n        />\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          style={{ marginTop: 10, width: \"100%\" }}\r\n          disabled={processing || disabled || succeeded}\r\n          type=\"submit\"\r\n        >\r\n          <span id=\"button-text\">\r\n            {processing ? <div className=\"spinner\" id=\"spinner\"></div> : \"Pay\"}\r\n          </span>\r\n        </Button>\r\n      </form>}\r\n    </>\r\n  )\r\n}\r\nexport default StripeWidget","import React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Typography } from '@material-ui/core'\r\nimport { toast } from 'react-toastify'\r\nimport { loadStripe } from '@stripe/stripe-js'\r\nimport { Elements } from '@stripe/react-stripe-js'\r\nimport { getCart } from \"../../../apiCalls/user\";\r\nimport BasicPaper from '../../common/paper/BasicPaper'\r\nimport StripeWidget from './StripeWidget'\r\n// import PayPalWidget from './PayPalWidget'\r\n\r\nconst promise = loadStripe(process.env.REACT_APP_STRIPE_KEY)\r\n\r\nconst Payment = ({ history }) => {\r\n  const user = useSelector(state => state.user)\r\n  const [cart, setCart] = useState({})\r\n  // const [paymentMethod, setPaymentMethod] = useState(\"card\")\r\n\r\n  useEffect(() => {\r\n    const asyncFunc = async () => {\r\n      try {\r\n        const cartFromDatabase = await getCart(user.token);\r\n        if (!cartFromDatabase.data.userCart) {\r\n          history.push(\"/cart\")\r\n        }\r\n        setCart(cartFromDatabase.data.userCart);\r\n      } catch (error) {\r\n        toast.error(error);\r\n      };\r\n    }\r\n    asyncFunc();\r\n  }, [user, history]);\r\n\r\n  const selectedPaymentPortalElement = () => {\r\n    // if (paymentMethod === \"card\") {\r\n    return (<Elements stripe={promise}>\r\n      <StripeWidget />\r\n    </Elements>)\r\n    // } \r\n    // else if (paymentMethod === \"paypal\") {\r\n    //   return (\r\n    //     <PayPalWidget cart={cart} />\r\n    //   )\r\n    // }\r\n  }\r\n\r\n  return (\r\n    <div className=\"page-frame\">\r\n      <BasicPaper>\r\n        <Typography variant=\"h5\">Complete purchase</Typography>\r\n        <Typography variant=\"body1\" style={{ marginBottom: 10 }}>Total: ${cart.cartTotal}</Typography>\r\n        {/* <Typography variant=\"body2\" style={{ marginBottom: 10 }}>Select payment method:</Typography> */}\r\n        {/* <ul style={{ listStyle: \"none\", display: \"flex\", marginBottom: 10 }}>\r\n          <li style={{ marginRight: 10 }}>\r\n            <Button onClick={() => setPaymentMethod(\"card\")} variant={paymentMethod === \"card\" ? \"contained\" : \"outlined\"} color=\"primary\">Credit Card</Button>\r\n          </li>\r\n          <li style={{ marginRight: 10 }}>\r\n            <Button onClick={() => setPaymentMethod(\"paypal\")} variant={paymentMethod === \"paypal\" ? \"contained\" : \"outlined\"} color=\"primary\">PayPal</Button>\r\n          </li>\r\n        </ul> */}\r\n        {selectedPaymentPortalElement()}\r\n      </BasicPaper>\r\n    </div>\r\n  )\r\n}\r\nexport default Payment"],"sourceRoot":""}